from app import db
from flask_login import UserMixin
from datetime import datetime

class User(UserMixin, db.Model):
    __tablename__ = 'usuarios'
    
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(80), unique=True, nullable=False)
    email = db.Column(db.String(120), unique=True, nullable=False)
    password_hash = db.Column(db.String(255), nullable=False)
    nombre_completo = db.Column(db.String(200))
    fecha_registro = db.Column(db.DateTime, default=datetime.utcnow)
    is_admin = db.Column(db.Boolean, default=False)
    activo = db.Column(db.Boolean, default=True)
    
    resultados = db.relationship('Resultado', backref='usuario', lazy=True)
    
    def __repr__(self):
        return f'<User {self.username}>'

class TipoPrueba(db.Model):
    __tablename__ = 'tipos_prueba'
    
    id = db.Column(db.Integer, primary_key=True)
    nombre = db.Column(db.String(100), nullable=False)
    descripcion = db.Column(db.Text)
    categoria = db.Column(db.String(50))
    activo = db.Column(db.Boolean, default=True)
    
    pruebas = db.relationship('Prueba', backref='tipo_prueba', lazy=True)
    
    def __repr__(self):
        return f'<TipoPrueba {self.nombre}>'

class Prueba(db.Model):
    __tablename__ = 'pruebas'
    
    id = db.Column(db.Integer, primary_key=True)
    nombre = db.Column(db.String(200), nullable=False)
    codigo = db.Column(db.String(50), unique=True)
    descripcion = db.Column(db.Text)
    tipo_prueba_id = db.Column(db.Integer, db.ForeignKey('tipos_prueba.id'), nullable=False)
    unidad_medida = db.Column(db.String(50))
    valor_referencia_min = db.Column(db.Float)
    valor_referencia_max = db.Column(db.Float)
    precio = db.Column(db.Numeric(10, 2))
    activo = db.Column(db.Boolean, default=True)
    
    resultados = db.relationship('Resultado', backref='prueba', lazy=True)
    
    def __repr__(self):
        return f'<Prueba {self.nombre}>'

class Resultado(db.Model):
    __tablename__ = 'resultados'
    
    id = db.Column(db.Integer, primary_key=True)
    usuario_id = db.Column(db.Integer, db.ForeignKey('usuarios.id'), nullable=False)
    prueba_id = db.Column(db.Integer, db.ForeignKey('pruebas.id'), nullable=False)
    valor_resultado = db.Column(db.String(200))
    fecha_realizacion = db.Column(db.DateTime, default=datetime.utcnow)
    observaciones = db.Column(db.Text)
    interpretacion = db.Column(db.Text)
    
    def __repr__(self):
        return f'<Resultado {self.id} - Usuario {self.usuario_id}>'
