from flask import Blueprint, render_template, redirect, url_for, flash, request, session, send_file, current_app
from flask_login import login_user, logout_user, login_required, current_userfrom app import dbfrom app.models import Usuario, Categoria, Prueba, Paciente, Resultado, Cotizacion, DetalleCotizacionfrom werkzeug.utils import secure_filenamefrom datetime import datetime, timedeltaimport os# Blueprintsmain_bp = Blueprint('main', __name__)auth_bp = Blueprint('auth', __name__)admin_bp = Blueprint('admin', __name__)catalogo_bp = Blueprint('catalogo', __name__)resultados_bp = Blueprint('resultados', __name__)# ============================================# RUTAS PRINCIPALES# ============================================@main_bp.route('/')def index():    categorias = Categoria.query.filter_by(is_active=True).order_by(Categoria.orden).limit(6).all()    return render_template('index.html', categorias=categorias)@main_bp.route('/about')def about():    return render_template('about.html')@main_bp.route('/contact')def contact():    return render_template('contact.html')# ============================================# RUTAS DE AUTENTICACIÓN# ============================================@auth_bp.route('/login', methods=['GET', 'POST'])def login():    if current_user.is_authenticated:        return redirect(url_for('admin.dashboard'))        if request.method == 'POST':        username = request.form.get('username')        password = request.form.get('password')                usuario = Usuario.query.filter_by(username=username).first()                if usuario and usuario.check_password(password) and usuario.is_active:            login_user(usuario)            usuario.ultimo_acceso = datetime.utcnow()            db.session.commit()                        next_page = request.args.get('next')            return redirect(next_page) if next_page else redirect(url_for('admin.dashboard'))        else:            flash('Usuario o contraseña incorrectos', 'error')        return render_template('login.html')@auth_bp.route('/logout')@login_requireddef logout():    logout_user()    flash('Sesión cerrada exitosamente', 'success')    return redirect(url_for('main.index'))# ============================================# RUTAS DE CATÁLOGO (Público)# ============================================@catalogo_bp.route('/')def lista():    categoria_id = request.args.get('categoria', type=int)    busqueda = request.args.get('q', '')        query = Prueba.query.filter_by(is_active=True)        if categoria_id:        query = query.filter_by(categoria_id=categoria_id)        if busqueda:        query = query.filter(Prueba.nombre.ilike(f'%{busqueda}%'))        pruebas = query.order_by(Prueba.nombre).all()    categorias = Categoria.query.filter_by(is_active=True).order_by(Categoria.orden).all()        return render_template('catalogo/lista_pruebas.html',                          pruebas=pruebas,                          categorias=categorias,                         categoria_seleccionada=categoria_id)@catalogo_bp.route('/prueba/<int:id>')def detalle(id):    prueba = Prueba.query.get_or_404(id)    return render_template('catalogo/detalle_prueba.html', prueba=prueba)@catalogo_bp.route('/agregar-carrito/<int:prueba_id>')def agregar_carrito(prueba_id):    prueba = Prueba.query.get_or_404(prueba_id)        if 'carrito' not in session:        session['carrito'] = []        carrito = session['carrito']        # Verificar si ya está en el carrito    item_existe = False    for item in carrito:        if item['id'] == prueba_id:            item['cantidad'] += 1            item_existe = True            break        if not item_existe:        carrito.append({            'id': prueba.id,            'codigo': prueba.codigo,            'nombre': prueba.nombre,            'precio': float(prueba.precio),            'cantidad': 1        })        session['carrito'] = carrito    session.modified = True        flash(f'{prueba.nombre} agregado al carrito', 'success')    return redirect(url_for('catalogo.lista'))@catalogo_bp.route('/carrito')def carrito():    carrito = session.get('carrito', [])    total = sum(item['precio'] * item['cantidad'] for item in carrito)    return render_template('catalogo/carrito.html', carrito=carrito, total=total)@catalogo_bp.route('/eliminar-carrito/<int:prueba_id>')def eliminar_carrito(prueba_id):    if 'carrito' in session:        carrito = session['carrito']        session['carrito'] = [item for item in carrito if item['id'] != prueba_id]        session.modified = True        flash('Prueba eliminada del carrito', 'info')    return redirect(url_for('catalogo.carrito'))@catalogo_bp.route('/solicitar-cotizacion', methods=['POST'])def solicitar_cotizacion():    carrito = session.get('carrito', [])        if not carrito:        flash('El carrito está vacío', 'warning')        return redirect(url_for('catalogo.lista'))        nombre = request.form.get('nombre')    email = request.form.get('email')    telefono = request.form.get('telefono')        # Generar número de cotización    fecha_actual = datetime.now()    numero_cotizacion = f"COT-{fecha_actual.strftime('%Y%m%d')}-{Cotizacion.query.count() + 1:04d}"        # Calcular total    total = sum(item['precio'] * item['cantidad'] for item in carrito)        # Crear cotización    cotizacion = Cotizacion(        numero_cotizacion=numero_cotizacion,        nombre_cliente=nombre,        email_cliente=email,        telefono_cliente=telefono,        total=total,        total_final=total,        estado='pendiente',        fecha_vencimiento=fecha_actual.date() + timedelta(days=7)    )        db.session.add(cotizacion)    db.session.flush()        # Agregar detalles    for item in carrito:        detalle = DetalleCotizacion(            cotizacion_id=cotizacion.id,            prueba_id=item['id'],            cantidad=item['cantidad'],            precio_unitario=item['precio'],            subtotal=item['precio'] * item['cantidad']        )        db.session.add(detalle)        db.session.commit()        # Limpiar carrito    session.pop('carrito', None)        flash(f'Cotización {numero_cotizacion} generada exitosamente. Te contactaremos pronto.', 'success')    return redirect(url_for('main.index'))# ============================================# RUTAS DE RESULTADOS (Público)# ============================================@resultados_bp.route('/consulta')def consulta():    return render_template('resultados/consulta.html')@resultados_bp.route('/buscar', methods=['POST'])def buscar():    ci = request.form.get('ci', '').strip()    codigo = request.form.get('codigo', '').strip()        if not ci and not codigo:        flash('Ingrese CI o Código de Acceso', 'warning')        return redirect(url_for('resultados.consulta'))        # Buscar paciente    if ci:        paciente = Paciente.query.filter_by(ci=ci, is_active=True).first()    else:        paciente = Paciente.query.filter_by(codigo_acceso=codigo, is_active=True).first()        if not paciente:        flash('No se encontró ningún paciente con esos datos', 'error')        return redirect(url_for('resultados.consulta'))        # Si se proporcionó CI pero no código, verificar código    if ci and codigo and paciente.codigo_acceso != codigo:        flash('Código de acceso incorrecto', 'error')        return redirect(url_for('resultados.consulta'))        # Obtener resultados del paciente    resultados = Resultado.query.filter_by(paciente_id=paciente.id).order_by(Resultado.fecha_muestra.desc()).all()        return render_template('resultados/historial.html',                          paciente=paciente,                          resultados=resultados)@resultados_bp.route('/descargar/<int:resultado_id>')@resultados_bp.route('/resultados/descargar/<int:resultado_id>')@login_requireddef descargar(resultado_id):    """    VERSIÓN ROBUSTA - Descarga de PDFs    Maneja errores sin eliminar registros de la BD    """    try:        # Obtener resultado        resultado = Resultado.query.get_or_404(resultado_id)                # Log para debug        current_app.logger.info(f'Intentando descargar: {resultado.archivo_pdf}')                # Verificar que tiene PDF asociado        if not resultado.archivo_pdf:            flash('Este resultado no tiene un archivo PDF asociado', 'warning')            return redirect(url_for('admin.resultados' if current_user.is_admin else 'main.index'))                # Construir ruta completa del archivo        from pathlib import Path                # Método 1: Intentar ruta relativa desde la raíz del proyecto        base_dir = Path(current_app.root_path).parent        ruta_completa = base_dir / resultado.archivo_pdf                # Si no existe, intentar otras ubicaciones comunes        if not ruta_completa.exists():            # Método 2: Desde app/            ruta_completa = Path(current_app.root_path) / resultado.archivo_pdf.replace('app/', '')                    if not ruta_completa.exists():            # Método 3: Ruta absoluta directa            ruta_completa = Path(resultado.archivo_pdf)                # Verificar que el archivo existe        if not ruta_completa.exists():            error_msg = f'❌ Archivo no encontrado: {resultado.archivo_pdf}'            current_app.logger.error(error_msg)            current_app.logger.error(f'Rutas intentadas:')            current_app.logger.error(f'  - {base_dir / resultado.archivo_pdf}')            current_app.logger.error(f'  - {Path(current_app.root_path) / resultado.archivo_pdf.replace("app/", "")}')            current_app.logger.error(f'  - {Path(resultado.archivo_pdf)}')                        flash('⚠️ El archivo PDF no se encuentra en el servidor. '                  'Por favor contacta al administrador.', 'error')            return redirect(url_for('admin.resultados' if current_user.is_admin else 'main.index'))                # Verificar que sea un archivo (no directorio)        if not ruta_completa.is_file():            error_msg = f'La ruta existe pero no es un archivo: {ruta_completa}'            current_app.logger.error(error_msg)            flash('Error: La ruta del PDF no es válida', 'error')            return redirect(url_for('admin.resultados' if current_user.is_admin else 'main.index'))                # Generar nombre de descarga        try:            from werkzeug.utils import secure_filename            nombre_paciente = resultado.paciente_nombre if hasattr(resultado, 'paciente_nombre') else 'Resultado'            download_name = f"{resultado.numero_orden}_{nombre_paciente}.pdf"            download_name = secure_filename(download_name)        except:            download_name = f"{resultado.numero_orden}.pdf"                # Enviar archivo        return send_file(            str(ruta_completa),            as_attachment=True,            download_name=download_name,            mimetype='application/pdf'        )        except Exception as e:        error_msg = f'Error al descargar: {str(e)}'        flash(error_msg, 'error')        current_app.logger.error(f'Error en descarga: {e}')        current_app.logger.exception(e)        return redirect(url_for('admin.resultados' if current_user.is_admin else 'main.index'))@admin_bp.route('/dashboard')@login_requireddef dashboard():        # TODO: Calcular estadísticas reales desde la BD        stats = {            'total_pacientes': 0,            'resultados_hoy': 0,            'pruebas_activas': 0,            'resultados_mes': 0        }    return render_template('admin/dashboard.html',, stats=stats)                         total_pacientes=total_pacientes,                         total_pruebas=total_pruebas,                         resultados_pendientes=resultados_pendientes,                         resultados_completados=resultados_completados,                         ultimos_resultados=ultimos_resultados)# PACIENTES@admin_bp.route('/pacientes')@login_requireddef pacientes():    busqueda = request.args.get('q', '')        if busqueda:        pacientes = Paciente.query.filter(            db.or_(                Paciente.ci.ilike(f'%{busqueda}%'),                Paciente.nombre.ilike(f'%{busqueda}%'),                Paciente.apellido_paterno.ilike(f'%{busqueda}%')            )        ).order_by(Paciente.created_at.desc()).all()    else:        pacientes = Paciente.query.order_by(Paciente.created_at.desc()).all()        return render_template('admin/pacientes.html', pacientes=pacientes)@admin_bp.route('/paciente/crear', methods=['GET', 'POST'])@login_requireddef crear_paciente():    if request.method == 'POST':        # Generar código de acceso        import random        import string        codigo = ''.join(random.choices(string.ascii_uppercase + string.digits, k=8))                paciente = Paciente(            ci=request.form.get('ci'),            nombre=request.form.get('nombre'),            apellido_paterno=request.form.get('apellido_paterno'),            apellido_materno=request.form.get('apellido_materno'),            fecha_nacimiento=datetime.strptime(request.form.get('fecha_nacimiento'), '%Y-%m-%d').date(),            genero=request.form.get('genero'),            telefono=request.form.get('telefono'),            celular=request.form.get('celular'),            email=request.form.get('email'),            direccion=request.form.get('direccion'),            codigo_acceso=codigo        )                db.session.add(paciente)        db.session.commit()                flash(f'Paciente creado. Código de acceso: {codigo}', 'success')        return redirect(url_for('admin.pacientes'))        return render_template('admin/crear_paciente.html')# PRUEBAS@admin_bp.route('/pruebas')@login_requireddef pruebas():    pruebas = Prueba.query.order_by(Prueba.nombre).all()    categorias = Categoria.query.all()    return render_template('admin/pruebas.html', pruebas=pruebas, categorias=categorias)# RESULTADOS@admin_bp.route('/resultados')@login_requireddef resultados():    estado = request.args.get('estado', '')        if estado:        resultados = Resultado.query.filter_by(estado=estado).order_by(Resultado.fecha_muestra.desc()).all()    else:        resultados = Resultado.query.order_by(Resultado.fecha_muestra.desc()).all()        return render_template('admin/resultados.html', resultados=resultados)@admin_bp.route('/resultado/subir', methods=['GET', 'POST'])@login_requireddef subir_resultado():    if request.method == 'POST':        paciente_id = request.form.get('paciente_id')        prueba_id = request.form.get('prueba_id')                # Generar número de orden        fecha_actual = datetime.now()        numero_orden = f"ORD-{fecha_actual.strftime('%Y%m%d')}-{Resultado.query.count() + 1:05d}"                resultado = Resultado(            numero_orden=numero_orden,            paciente_id=paciente_id,            prueba_id=prueba_id,            fecha_muestra=datetime.strptime(request.form.get('fecha_muestra'), '%Y-%m-%d'),            estado='completado',            created_by=current_user.id        )                # Subir archivo PDF si existe        if 'archivo' in request.files:            file = request.files['archivo']            if file.filename:                filename = secure_filename(f"{numero_orden}_{file.filename}")                filepath = os.path.join('uploads', 'resultados', filename)                file.save(filepath)                resultado.archivo_pdf = filepath                resultado.fecha_resultado = datetime.utcnow()                db.session.add(resultado)        db.session.commit()                flash(f'Resultado {numero_orden} subido exitosamente', 'success')        return redirect(url_for('admin.resultados'))        pacientes = Paciente.query.filter_by(is_active=True).order_by(Paciente.nombre).all()    pruebas = Prueba.query.filter_by(is_active=True).order_by(Prueba.nombre).all()        return render_template('admin/subir_resultado.html', pacientes=pacientes, pruebas=pruebas)